version: 2.1

orbs:
    snyk: snyk/snyk@1.4.0

workflows:
  vulnerability-scan:
    jobs:
      - vulnerability-scan:
          context: org-global-employees

jobs:
  build:
    docker:
      - image: circleci/clojure:lein-2.9.1
    environment:
      LEIN_ROOT: nbd
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: cci-demo-clojure-{{ checksum "project.clj" }}
      - run: lein deps
      - save_cache:
          paths:
            - ~/.m2
          key: cci-demo-clojure-{{ checksum "project.clj" }}
      - run: lein do test, uberjar
      - store_artifacts:
          path: target/uberjar/cci-demo-clojure.jar
          destination: uberjar

  vulnerability-scan:
    docker:
        - image: cimg/openjdk:19.0
    steps:
        - checkout
        - run:
            name: Setup Scanning
            command: |
                # echo "export BASE_BRANCH=$(git log --pretty=format:'%D' HEAD^ | grep 'origin/' | head -n1 | sed 's@origin/@@' | sed 's@,.*@@')" >> "$BASH_ENV"
                echo "export BASE_BRANCH=add-vulnerability-scanning" >> "$BASH_ENV"
                git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
                echo "→ Downloading Lein"
                curl --progress-bar --retry 6 -o ~/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
                chmod +x ~/bin/lein
                if [ -f "project.clj" ]; then
                  echo "→ Generating pom.xml file..."
                  lein pom
                  echo "done"
                fi
        - run:
            name: Setup Scanning
            command: |
                echo "Base branch is: $BASE_BRANCH"
        - when:
            condition:
                equal: [ $BASE_BRANCH, << pipeline.git.branch >> ]
            steps:
                - run:
                    name: Launching Snyk Orb Scanning
                    command: echo "Running snyk/scan on main; uploading the results"
                - snyk/scan:
                    additional-arguments: "--file='pom.xml'"
                    fail-on-issues: false
                    severity-threshold: high
                    monitor-on-build: true
                    project: '${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:pom.xml'
        - unless:
            condition:
                equal: [ $BASE_BRANCH, << pipeline.git.branch >> ]
            steps:
                - run:
                    name: Launching Snyk Orb Scanning
                    command: echo "Running snyk/scan on branch; not uploading the results"
                - snyk/scan:
                    additional-arguments: "--file='pom.xml'"
                    fail-on-issues: false
                    severity-threshold: high
                    monitor-on-build: false
                    project: '${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}:pom.xml'

